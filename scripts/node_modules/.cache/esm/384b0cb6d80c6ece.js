let Banco;_d80‍.x([["RemessaSafra",()=>RemessaSafra]]);_d80‍.w("../Banco",[["Banco",["Banco"],function(v){Banco=v}]]);
       class RemessaSafra extends Banco {
    constructor(codigoBanco) {
        super(codigoBanco);
        this.arquivoRemessa = {
            Header: {},
            Detalhamento: {},
            Trailer: {},
        };
        this.gerarArquivoRemessa();
    }
    gerarArquivoRemessa() {
        this.carregarHeaderArquivo();
        this.carregarTrailerArquivo();
    }
    getArquivoRemessa() { return this.arquivoRemessa; }
    getArquivoRemessaString() {
        return (this.arquivoRemessa.Header.TipoRegistro.valor + this.arquivoRemessa.Header.CodArquivo.valor
            + this.arquivoRemessa.Header.IdentArquivo.valor + this.arquivoRemessa.Header.CodServico.valor
            + this.arquivoRemessa.Header.IdentServico.valor + this.arquivoRemessa.Header.Brancos1.valor
            + this.arquivoRemessa.Header.CodEmpresa.valor + this.arquivoRemessa.Header.Brancos2.valor
            + this.arquivoRemessa.Header.NomeEmpresa.valor + this.arquivoRemessa.Header.CodBanco.valor
            + this.arquivoRemessa.Header.NomeBanco.valor + this.arquivoRemessa.Header.Brancos3.valor
            + this.arquivoRemessa.Header.DataGravacao.valor + this.arquivoRemessa.Header.Brancos4.valor
            + this.arquivoRemessa.Header.NumeroArquivo.valor + this.arquivoRemessa.Header.NumeroRegistro.valor + '\n'
            + 'detalhamento' + '\n'
            + this.arquivoRemessa.Trailer.TipoRegistro.valor + this.arquivoRemessa.Trailer.Brancos1.valor
            + this.arquivoRemessa.Trailer.Quantidade.valor + this.arquivoRemessa.Trailer.ValorTotal.valor
            + this.arquivoRemessa.Trailer.NumeroArquivo.valor + this.arquivoRemessa.Trailer.NumeroSequencial.valor);
    }
    getHeaderProtoType() {
        return {
            TipoRegistro: { mascara: "9(01)", posicao: 1, tamanho: 1, valor: "" },
            CodArquivo: { mascara: "9(01)", posicao: 2, tamanho: 1, valor: "" },
            IdentArquivo: { mascara: "X(07)", posicao: 3, tamanho: 7, valor: "" },
            CodServico: { mascara: "9(02)", posicao: 10, tamanho: 2, valor: "" },
            IdentServico: { mascara: "X(08)", posicao: 12, tamanho: 8, valor: "" },
            Brancos1: { mascara: "X(07)", posicao: 20, tamanho: 7, valor: "" },
            CodEmpresa: { mascara: "9(14)", posicao: 27, tamanho: 14, valor: "" },
            Brancos2: { mascara: "X(06)", posicao: 41, tamanho: 6, valor: "" },
            NomeEmpresa: { mascara: "X(30)", posicao: 47, tamanho: 30, valor: "" },
            CodBanco: { mascara: "9(03)", posicao: 77, tamanho: 3, valor: "" },
            NomeBanco: { mascara: "X(11)", posicao: 80, tamanho: 11, valor: "" },
            Brancos3: { mascara: "X(04)", posicao: 91, tamanho: 4, valor: "" },
            DataGravacao: { mascara: "9(06)", posicao: 95, tamanho: 6, valor: "" },
            Brancos4: { mascara: "X(291)", posicao: 101, tamanho: 291, valor: "" },
            NumeroArquivo: { mascara: "9(03)", posicao: 392, tamanho: 3, valor: "" },
            NumeroRegistro: { mascara: "9(06)", posicao: 395, tamanho: 6, valor: "" },
        };
    }
    getLinhaDetalheProtoType() {
        return {
            TipoRegistro: { mascara: "9(01)", posicao: 1, tamanho: 1, valor: "" },
            CodInscricaoEmpresa: { mascara: "9(02)", posicao: 2, tamanho: 2, valor: "" },
            NumeroInscricaoEmpresa: { mascara: "9(14)", posicao: 4, tamanho: 14, valor: "" },
            CodEmpresa: { mascara: "9(14)", posicao: 18, tamanho: 14, valor: "" },
            Brancos1: { mascara: "X(06)", posicao: 32, tamanho: 6, valor: "" },
            UsoEmpresa: { mascara: "X(25)", posicao: 38, tamanho: 25, valor: "" },
            NossoNumero: { mascara: "9(09)", posicao: 63, tamanho: 9, valor: "" },
            Brancos2: { mascara: "X(30)", posicao: 72, tamanho: 30, valor: "" },
            CodIOF: { mascara: "9(01)", posicao: 102, tamanho: 1, valor: "" },
            CodMoeda: { mascara: "9(02)", posicao: 103, tamanho: 2, valor: "" },
            Brancos3: { mascara: "X(01)", posicao: 105, tamanho: 1, valor: "" },
            Instrucao3: { mascara: "9(02)", posicao: 106, tamanho: 2, valor: "" },
            CodCarteira: { mascara: "9(01)", posicao: 108, tamanho: 1, valor: "" },
            CodOcorrencia: { mascara: "9(02)", posicao: 109, tamanho: 2, valor: "" },
            SeuNumero: { mascara: "X(10)", posicao: 111, tamanho: 10, valor: "" },
            DataVencimento: { mascara: "9(06)", posicao: 121, tamanho: 6, valor: "" },
            ValorTitulo: { mascara: "9(11)V99", posicao: 127, tamanho: 13, valor: "" },
            BancoDesposito: { mascara: "9(03)", posicao: 140, tamanho: 3, valor: "" },
            AgenciaDepositaria: { mascara: "9(05)", posicao: 143, tamanho: 5, valor: "" },
            Especie: { mascara: "9(02)", posicao: 148, tamanho: 2, valor: "" },
            CodAceite: { mascara: "X(01)", posicao: 150, tamanho: 1, valor: "" },
            Emissao: { mascara: "9(06)", posicao: 151, tamanho: 6, valor: "" },
            Instrucao1: { mascara: "9(02)", posicao: 157, tamanho: 2, valor: "" },
            Instrucao2: { mascara: "9(02)", posicao: 159, tamanho: 2, valor: "" },
            ValorJurosMora: { mascara: "9(11)V99", posicao: 161, tamanho: 13, valor: "" },
            DataLimiteDesconto: { mascara: "9(06)", posicao: 174, tamanho: 6, valor: "" },
            ValorDesconto: { mascara: "9(11)V99", posicao: 180, tamanho: 13, valor: "" },
            ValorIOF: { mascara: "9(11)V99", posicao: 193, tamanho: 13, valor: "" },
            ValorAbatimento: { mascara: "9(11)V99", posicao: 206, tamanho: 13, valor: "" },
            CodInscricaoPagador: { mascara: "9(02)", posicao: 219, tamanho: 2, valor: "" },
            NumeroInscricaoPagador: { mascara: "9(14)", posicao: 221, tamanho: 14, valor: "" },
            NomePagador: { mascara: "X(40)", posicao: 235, tamanho: 40, valor: "" },
            EnderecoPagador: { mascara: "X(40)", posicao: 275, tamanho: 40, valor: "" },
            BairroPagador: { mascara: "X(10)", posicao: 315, tamanho: 10, valor: "" },
            Brancos4: { mascara: "X(02)", posicao: 325, tamanho: 2, valor: "" },
            CEPPagador: { mascara: "9(08)", posicao: 327, tamanho: 8, valor: "" },
            CidadePagador: { mascara: "X(15)", posicao: 335, tamanho: 15, valor: "" },
            EstadoPagador: { mascara: "X(02)", posicao: 350, tamanho: 2, valor: "" },
            NomeAvalista: { mascara: "X(30)", posicao: 352, tamanho: 30, valor: "" },
            Brancos5: { mascara: "X(07)", posicao: 382, tamanho: 7, valor: "" },
            BancoEmitente: { mascara: "9(03)", posicao: 389, tamanho: 3, valor: "" },
            NumeroArquivo: { mascara: "9(03)", posicao: 392, tamanho: 3, valor: "" },
            NumeroSequencial: { mascara: "9(06)", posicao: 395, tamanho: 6, valor: "" },
        };
    }
    getTrailerProtoType() {
        return {
            TipoRegistro: { mascara: "9(01)", posicao: 1, tamanho: 1, valor: "" },
            Brancos1: { mascara: "X(367)", posicao: 2, tamanho: 367, valor: "" },
            Quantidade: { mascara: "9(08)", posicao: 369, tamanho: 8, valor: "" },
            ValorTotal: { mascara: "9(13)V99", posicao: 377, tamanho: 15, valor: "" },
            NumeroArquivo: { mascara: "9(3)", posicao: 392, tamanho: 3, valor: "" },
            NumeroSequencial: { mascara: "9(6)", posicao: 395, tamanho: 6, valor: "" },
        };
    }
    carregarHeaderArquivo() {
        let header = this.getHeaderProtoType();
        header.Brancos1.valor = this.formatarValorCelula(header.Brancos1, "");
        header.Brancos2.valor = this.formatarValorCelula(header.Brancos2, "");
        header.Brancos3.valor = this.formatarValorCelula(header.Brancos3, "");
        header.Brancos4.valor = this.formatarValorCelula(header.Brancos4, "");
        header.TipoRegistro.valor = this.formatarValorCelula(header.TipoRegistro, "0");
        header.CodArquivo.valor = this.formatarValorCelula(header.CodArquivo, "1");
        header.IdentArquivo.valor = this.formatarValorCelula(header.IdentArquivo, "REMESSA");
        header.CodServico.valor = this.formatarValorCelula(header.CodServico, "01");
        header.IdentServico.valor = this.formatarValorCelula(header.IdentServico, "Cobrança");
        header.CodEmpresa.valor = this.formatarValorCelula(header.CodEmpresa, "12345678901234");
        header.NomeEmpresa.valor = this.formatarValorCelula(header.NomeEmpresa, "EMPRESA DE TESTES");
        header.CodBanco.valor = this.formatarValorCelula(header.CodBanco, "422");
        header.NomeBanco.valor = this.formatarValorCelula(header.NomeBanco, "BANCO SAFRA");
        header.DataGravacao.valor = this.formatarValorCelula(header.DataGravacao, "171020");
        header.NumeroArquivo.valor = this.formatarValorCelula(header.NumeroArquivo, "001");
        header.NumeroRegistro.valor = this.formatarValorCelula(header.NumeroRegistro, "00001");
        if (this.validarHeaderArquivo(header))
            this.arquivoRemessa.Header = header;
    }
    validarHeaderArquivo(header) {
        return (this.validarMascara(header.TipoRegistro)
            && this.validarMascara(header.CodArquivo)
            && this.validarMascara(header.IdentArquivo)
            && this.validarMascara(header.CodServico)
            && this.validarMascara(header.IdentServico)
            && this.validarMascara(header.CodEmpresa)
            && this.validarMascara(header.NomeEmpresa)
            && this.validarMascara(header.CodBanco)
            && this.validarMascara(header.NomeBanco)
            && this.validarMascara(header.DataGravacao)
            && this.validarMascara(header.NumeroArquivo)
            && this.validarMascara(header.NumeroRegistro));
    }
    carregarDetalhamento() {
        let registroDetalhe = this.getLinhaDetalheProtoType();
        registroDetalhe.TipoRegistro.valor = "01";
    }
    validarDetalhamento() {
    }
    carregarTrailerArquivo() {
        let trailer = this.getTrailerProtoType();
        trailer.TipoRegistro.valor = this.formatarValorCelula(trailer.TipoRegistro, "9");
        trailer.Quantidade.valor = this.formatarValorCelula(trailer.Quantidade, "00000012");
        trailer.ValorTotal.valor = this.formatarValorCelula(trailer.ValorTotal, "00000012350199");
        trailer.NumeroArquivo.valor = this.formatarValorCelula(trailer.NumeroArquivo, "001");
        trailer.NumeroSequencial.valor = this.formatarValorCelula(trailer.NumeroSequencial, "000003");
        trailer.Brancos1.valor = this.formatarValorCelula(trailer.Brancos1, "");
        if (this.validarTrailerArquivo(trailer))
            this.arquivoRemessa.Trailer = trailer;
    }
    validarTrailerArquivo(trailer) {
        return (this.validarMascara(trailer.TipoRegistro)
            && this.validarMascara(trailer.Quantidade)
            && this.validarMascara(trailer.ValorTotal)
            && this.validarMascara(trailer.NumeroArquivo)
            && this.validarMascara(trailer.NumeroSequencial)
            && this.validarMascara(trailer.Brancos1));
    }
    //SEPARAR DA CLASSE
    formatarValorCelula(celula, valor) {
        let charARepetir = celula.mascara[0] == '9' ? '0' : ' ';
        if (valor.length > celula.tamanho)
            return valor.slice(0, celula.tamanho);
        else if (valor.length < celula.tamanho)
            if (celula.preenchimento) {
                if (!celula.preenchimento.caractere)
                    celula.preenchimento.caractere = charARepetir;
                return celula.preenchimento.posicao == 'direita' ?
                    valor + celula.preenchimento.caractere.repeat(celula.tamanho - valor.length)
                    : celula.preenchimento.caractere.repeat(celula.tamanho - valor.length) + valor;
            }
            else
                return charARepetir.repeat(celula.tamanho - valor.length) + valor;
        return valor;
    }
    validarMascara(celula) {
        //Tipo de caractere aceito pelo campo
        let tipo = celula.mascara[0] == 'X' ? 'char' : celula.mascara[0] == '9' ? 'number' : '';
        if (!tipo)
            return false;
        //Quantidade de caracteres máx aceita pelo campo
        let qtdDigitos = Number(/\((\d*)\)/.exec(celula.mascara)[1]);
        //Qtd de digitos decimais a se considerar, quando campos usados se referem a valores
        let precisaoDecimal = celula.mascara.indexOf('V') != -1 ? /V(\d*)/.exec(celula.mascara)[1].length : 0;
        if (tipo == 'char')
            return (celula.tamanho == celula.valor.length && celula.tamanho == qtdDigitos);
        return (celula.tamanho == celula.valor.length
            && celula.tamanho == /\d*/.exec(celula.valor)[0].length
            && celula.tamanho == (qtdDigitos + precisaoDecimal));
    }
}
